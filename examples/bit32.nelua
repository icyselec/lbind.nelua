## LBIND_HEADER_PATH = "luajit-2.1/"
## LBIND_LUA_VERSION_DEFAULT = {5, 1, 0}

require 'string'
local Lua = require 'LuaLib'
local Aux = require 'LuaAux'
local State = require('LuaDef').State
local Number = require('LuaDef').Number

-- Type definitions
local I32: type = @cint
local U32: type = @cuint

local BitNum = @union{
	n: Number,
	b: U32,
}

local function barg(L: *State, i: cint): U32
	local bn: BitNum <noinit>
	local b: U32 <noinit>

	bn.n = Aux.checknumber(L, i)
	bn.n = bn.n + 6755399441055744.0
	b = (@U32)(bn.b)

	return b
end

## local function BRET(b)
	Lua.pushnumber(L, (@Number)((@I32)(#[b]#)))
	in 1
## end

local function bit_tobit(L: *State): cint return #[BRET]#(barg(L, 1)) end
local function bit_bnot (L: *State): cint return #[BRET]#(~barg(L, 1)) end

local function bit_band_opr (a: auto, b: auto) <inline>
	return a & b
end

local function bit_bor_opr (a: auto, b: auto) <inline>
	return a | b
end

local function bit_bxor_opr (a: auto, b: auto) <inline>
	return a ~ b
end
local function bit_band(L: *State): cint
	local i: cint <noinit>
	local b: U32 = barg(L, 1)
	
	for i = Lua.gettop(L), 2, -1 do
		b = bit_band_opr(b, barg(L, i))
	end

	return #[BRET]#(b)
end
local function bit_bor(L: *State): cint
	local i: cint <noinit>
	local b: U32 = barg(L, 1)
	
	for i = Lua.gettop(L), 2, -1 do
		b = bit_bor_opr(b, barg(L, i))
	end

	return #[BRET]#(b)
end
local function bit_bxor(L: *State): cint
	local i: cint <noinit>
	local b: U32 = barg(L, 1)
	
	for i = Lua.gettop(L), 2, -1 do
		b = bit_bxor_opr(b, barg(L, i))
	end

	return #[BRET]#(b)
end

## local function bshl(b, n)
	in b << n
## end

## local function bshr(b, n)
	in b >> n
## end

## local function bsar(b, n)
	in (@I32)(b) >>> n
## end

## local function brol(b, n)
	in (b << n) | (b >> (32-n))
## end

## local function bror(b, n)
	in (b << (32-n)) | (b >> n)
## end

## local function BIT_SH(func, fn)
	local function #|func|#(L: *State): cint
		local b: U32 = barg(L, 1)
		local n: U32 = barg(L, 2) & 31
		return #[BRET]#(#[fn]#(b, n))
	end
## end

## BIT_SH('bit_lshift', bshl)
## BIT_SH('bit_rshift', bshr)
## BIT_SH('bit_arshift', bsar)
## BIT_SH('bit_rol', brol)
## BIT_SH('bit_ror', bror)

local function bit_bswap(L: *State): cint
	local b: U32 = barg(L, 1)
	b = (b >> 24) | ((b >> 8) & 0xFF00) | ((b & 0xFF00) << 8) | (b << 24)
	return #[BRET]#(b)
end

local function bit_tohex(L: *State): cint
	local b: U32 = barg(L, 1)
	local n: I32 = (do
		local res: I32
		if Lua.isnone(L, 2) ~= 0 then
			res = 8
		else
			res = (@I32)(barg(L, 2))
		end
		in res
	end)

	local hexdigits: string <const> = (do local res: string = "0123456789abcdef" if n < 0 then res = "0123456789ABCDEF" end in res end)
	if n > 8 then n = 8 end
	local i: cint <noinit>
	local buf: [8]cchar <noinit>
	for i = n-1, 0, -1 do
		buf[i] = hexdigits[(b & 15) + 1]
		b = b >> 4
	end

	Lua.pushlstring(L, &buf, (@usize)(n))
	return 1
end

local Reg = require('LuaDef').Reg

local function BitLibRegister(s: cstring <const>, f: function(L: *State): cint): Reg
	return Reg{s, f}
end


-- no bad-sar check
local function luaopen_bit32(L: *State): cint <cexport, codename 'luaopen_bit32'>
	local bit_funcs: []Reg = {
		{"tobit", bit_tobit},
		{"bnot", bit_bnot},
		{"band", bit_band},
		{"bor", bit_bor},
		{"bxor", bit_bxor},
		{"lshift", bit_lshift},
		{"rshift", bit_rshift},
		{"arshift", bit_arshift},
		{"rol", bit_rol},
		{"ror", bit_ror},
		{"bswap", bit_bswap},
		{"tohex", bit_tohex},
		{nilptr, nilptr},
	}

	Aux.register(L, "bit32", &bit_funcs[0])
	return 1
end
